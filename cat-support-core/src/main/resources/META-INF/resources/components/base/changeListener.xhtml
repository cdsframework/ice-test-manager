<?xml version='1.0' encoding='UTF-8' ?>
<!--

    CAT Core support plugin project.

    Copyright (C) 2016 New York City Department of Health and Mental Hygiene, Bureau of Immunization
    Contributions by HLN Consulting, LLC

    This program is free software: you can redistribute it and/or modify it under the terms of the GNU
    Lesser General Public License as published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version. You should have received a copy of the GNU Lesser
    General Public License along with this program. If not, see <http://www.gnu.org/licenses/> for more
    details.

    The above-named contributors (HLN Consulting, LLC) are also licensed by the New York City
    Department of Health and Mental Hygiene, Bureau of Immunization to have (without restriction,
    limitation, and warranty) complete irrevocable access and rights to this project.

    This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; THE
    SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING,
    BUT NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS, IF ANY, OR DEVELOPERS BE LIABLE FOR
    ANY CLAIM, DAMAGES, OR OTHER LIABILITY OF ANY KIND, ARISING FROM, OUT OF, OR IN CONNECTION WITH
    THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

    For more information about this software, see https://www.hln.com/services/open-source/ or send
    correspondence to ice@hln.com.

-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:cc="http://java.sun.com/jsf/composite">

    <!-- INTERFACE -->
    <cc:interface>
        <cc:attribute name="debug" type="java.lang.Boolean" default="false" />
    </cc:interface>

    <!-- IMPLEMENTATION -->
    <cc:implementation>
        <script class="javascript" type="text/javascript">

            var DEBUG = #{cc.attrs.debug};
            var changedStates = new Array();
            var dialogAction = new Array();
            var gotoRecordPosition = new Array();
            var remoteCommand = new Array();
            if (DEBUG) {
                log('loading changeListener - completed');
            }

            function onChange(key) {
                var METHODNAME = 'onChange ';
                if(typeof(key) !== 'undefined') {
                    if (DEBUG) {
                        log(METHODNAME + ': "' + key + '"');
                    }
                    changedStates[key] = true;
                } else {
                    log(METHODNAME + 'key is undefined');
                }
            }

            function resetChangedState(key) {
                var METHODNAME = 'resetChangedState ';
                if (DEBUG) {
                    log(METHODNAME + ': "' + key + '"');
                }
                changedStates[key] = false;
            }
            
            function onTabChange(key, event, index, savedChangesWidgetVar) {
                var METHODNAME = 'onTabChange ';
                if (DEBUG) {
                    log(METHODNAME + ': "' + key + '"' + ' - ' + event + ' - ' + index + ' - ' + savedChangesWidgetVar);
                    log(METHODNAME + ': "' + key + '"' + ' - getChangedState: ' + getChangedState(key));
                }
                if (getChangedState(key)) {
                    savedChangesWidgetVar.show();
                }
                return !changedStates[key];
            }            

            function onClose(key, discardChangesWidgetVar, dialogWidgetVar) {
                var METHODNAME = 'onClose ';
                if (DEBUG) {
                    log(METHODNAME + ': "' + key + '"' + ' - ' + discardChangesWidgetVar + ' - ' + dialogWidgetVar);
                    log(METHODNAME + ': "' + key + '"' + ' - getChangedState: ' + getChangedState(key));
                }
                if (getChangedState(key)) {
                    dialogAction[key] = "onClose";
                    discardChangesWidgetVar.show();
                } else {
                    dialogWidgetVar.hide();
                }
            }

            function onClickNo(key, discardChangesWidgetVar) {
                var METHODNAME = 'onClickNo ';
                if (DEBUG) {
                    log(METHODNAME + ': "' + key + '"' + ' - ' + discardChangesWidgetVar);
                }
                var action = getDialogAction(key);
                discardChangesWidgetVar.hide(); 
                if (action === "onGotoRecord") {
                    clearGotoRecordPosition(key);
                }
            }
            
            function onCompleteYes(key, discardChangesWidgetVar, dialogWidgetVar) {
                var METHODNAME = 'onCompleteYes ';
                if (DEBUG) {
                    log(METHODNAME + ': "' + key + '"' + ' - ' + discardChangesWidgetVar + ' - ' + dialogWidgetVar);
                }
                var action = getDialogAction(key);
                resetChangedState(key);
                if (action === "onClose") {
                    dialogWidgetVar.hide();
                    discardChangesWidgetVar.hide(); 
                }
                else if (action === "onGotoRecord") {
                    discardChangesWidgetVar.hide(); 
                    var command = getRemoteCommand(key);
                    command([{name:'recordPosition', value:getGotoRecordPosition(key)}]);        
                }
                else if (action === "onNew") {
                    discardChangesWidgetVar.hide(); 
                    var command = getRemoteCommand(key);
                    command();        
                }

            }            

            function onGotoRecord(key, discardChangesWidgetVar, recordPosition, rmtCommand) {
                var METHODNAME = 'onGotoRecord ';
                log(METHODNAME + ' DEBUG: ' + DEBUG + '/' + key);
                if (DEBUG) {
                    log(METHODNAME + ': "' + key + '"' + ' - ' + discardChangesWidgetVar );
                    log(METHODNAME + ': "' + key + '"' + ' - getChangedState: ' + getChangedState(key));
                    log(METHODNAME + ': "' + key + '"' + ' - recordPosition: ' + recordPosition);
                }
                if (getChangedState(key)) {
                    dialogAction[key] = "onGotoRecord";
                    gotoRecordPosition[key] = recordPosition;
                    remoteCommand[key] = rmtCommand;
                    discardChangesWidgetVar.show();
                }
                else {
                    rmtCommand([{name:'recordPosition', value:recordPosition}]);        
                }
            }

            function getRemoteCommand(key) {
                var METHODNAME = 'getRemoteCommand ';
                if (DEBUG) {
                    log(METHODNAME + ': "' + key + '"');
                }
                var command = remoteCommand[key];
                remoteCommand[key] = "";
                return command;
            }
            
            function getDialogAction(key) {
                var METHODNAME = 'getDialogAction ';
                if (DEBUG) {
                    log(METHODNAME + ': "' + key + '"');
                }
                var action = dialogAction[key];
                dialogAction[key] = "";
                return action;
            }

            function getGotoRecordPosition(key) {
                var METHODNAME = 'getGotoRecordPosition ';
                if (DEBUG) {
                    log(METHODNAME + ': "' + key + '"');
                }
                var recordPosition = gotoRecordPosition[key];
                clearGotoRecordPosition(key);
                return recordPosition;
            }

            function clearGotoRecordPosition(key) {
                var METHODNAME = 'clearGotoRecordPosition ';
                if (DEBUG) {
                    log(METHODNAME + ': "' + key + '"');
                }
                gotoRecordPosition[key] = "";
            }

            function onSave(key, saved, dialogWidgetVar) {
                var METHODNAME = 'onSave ';
                if (DEBUG) {
                    log(METHODNAME + ': "' + key + '"' + ' - ' + saved + ' - ' + dialogWidgetVar);
                }
                if (saved) {
                    dialogWidgetVar.hide();
                    resetChangedState(key);
                }
            }

            function onApply(key, saved) {
                var METHODNAME = 'onApply ';
                if (DEBUG) {
                    log(METHODNAME + ': "' + key + '"' + ' - ' + saved);
                }
                if (saved) {
                    resetChangedState(key);
                }
            }
            
            function onNew(key, discardChangesWidgetVar, rmtCommand) {
                var METHODNAME = 'onNew ';
                if (DEBUG) {
                    log(METHODNAME + ': "' + key + '"' + ' - ' + discardChangesWidgetVar );
                    log(METHODNAME + ': "' + key + '"' + ' - getChangedState: ' + getChangedState(key));
                }
                if (getChangedState(key)) {
                    dialogAction[key] = "onNew";
                    remoteCommand[key] = rmtCommand;
                    discardChangesWidgetVar.show();
                }
                else {
                    rmtCommand();        
                }
            }
            
            function onOk(key, saved, dialogWidgetVar) {
                var METHODNAME = 'onOk ';
                if (DEBUG) {
                    log(METHODNAME + ': "' + key + '"' + ' - ' + saved + ' - ' + dialogWidgetVar);
                }
                if (saved) {
                    dialogWidgetVar.hide();
                    resetChangedState(key);
                }
            }

            function getChangedState(key) {
                var METHODNAME = 'getChangedState ';
                if (DEBUG) {
                    log(METHODNAME + ': "' + key + '"');
                }
                if (typeof(changedStates[key]) === 'undefined') {
                    changedStates[key] = false;
                }
                return changedStates[key];
            }
            
        </script>
    </cc:implementation>
</html>